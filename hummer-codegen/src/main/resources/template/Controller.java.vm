package

import com.coracle.mxm.common.controller.AbstractController;
import com.coracle.mxm.common.util.PageUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.hummer.core.jason.JsonResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

${package}.controller;
    ${package}.dto.${className}Dto;
    ${package}.model.${className};
    ${package}.service.${className}Service;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("${pathName}")
public class ${className}Controller extends AbstractController {
    @Autowired
    private ${className}Service ${classname}Service;

    @RequestMapping("/${pathName}.html")
    public String list() {
        return "${pathName}/${pathName}.html";
    }

    /**
     * 列表
     */
    @ResponseBody
    @RequestMapping("/list")
    @RequiresPermissions("${pathName}:list")
    public JsonResponse list(${className}Dto ${classname}Dto) throws Exception {
        PageUtils pageUtil = new PageUtils(${classname}Service.queryForPage(${classname}Dto));
        return JsonResponse.ok().put("page", pageUtil);
    }

    /**
     * 信息
     */
    @ResponseBody
    @RequestMapping("/info/{id}")
    @RequiresPermissions("${pathName}:info")
    public JsonResponse info(@PathVariable("id") String id) {
        ${className} info = ${classname}Service.queryObject(id);
        return JsonResponse.ok().put("info", info);
    }

    /**
     * 保存
     */
    @ResponseBody
    @RequestMapping("/save")
    @RequiresPermissions("${pathName}:save")
    public JsonResponse save(@RequestBody ${className} insertRecord) {
            ${classname}Service.save(insertRecord, getUserId());
        return JsonResponse.ok();
    }

    /**
     * 修改
     */
    @ResponseBody
    @RequestMapping("/update")
    @RequiresPermissions("${pathName}:update")
    public JsonResponse update(@RequestBody ${className} updateRecord) {
            ${classname}Service.update(updateRecord, getUserId());
        return JsonResponse.ok();
    }

    /**
     * 删除
     */
    @ResponseBody
    @RequestMapping("/delete")
    @RequiresPermissions("${pathName}:delete")
    public JsonResponse delete(@RequestBody String[] ids) {
            ${classname}Service.deleteBatch(ids, getUserId());
        return JsonResponse.ok();
    }

    /**
     * 启用
     */
    @ResponseBody
    @RequestMapping("/enable")
    @RequiresPermissions("${pathName}:enable")
    public JsonResponse enable(@RequestBody String[] ids) {
            ${classname}Service.enableBatch(ids, getUserId());
        return JsonResponse.ok();
    }

    /**
     * 禁用
     */
    @ResponseBody
    @RequestMapping("/disable")
    @RequiresPermissions("${pathName}:disable")
    public JsonResponse disable(@RequestBody String[] ids) {
            ${classname}Service.disableBatch(ids, getUserId());
        return JsonResponse.ok();
    }
}